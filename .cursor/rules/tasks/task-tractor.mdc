---
alwaysApply: false
---
# Interactive Tractor Generator

## What Are Tractors?

**Tractors are low-fidelity, interactive prototypes** that validate product flows before investing in high-fidelity design. They serve as "visual PRDs" to present the planned product "functional-content", and to align stakeholders on functionality and user experience.

### **Tractor Principles:**
- **Intentionally rough** - Must look like obvious prototypes, not polished designs
- **Functional, not beautiful** - Focus on user flow validation, not visual polish
- **Interactive, not static** - Click-through experiences that feel real
- **Fast to create** - Rapid prototyping using reusable components
- **Wix Studio context** - Familiar environment for our team
- **Stakeholder-friendly** - Easy to review and provide feedback
- **Use obvious placeholder styling** - Gray backgrounds, dashed borders, basic fonts

## Tractor Generation Process

### **Phase 1: Understand the Request**
- CRITICAL: If you are not sure in >=70% - ask and verify with the user before acting
- Make sure you understand exactly what screens and/or flow the tractor should show. There is no need to recreate entire full solutions
- Advise any PRD available for this project that is relvant to the tractor
- Look for, and use relevant output and/or context material of the project when creating the tractor
- If the user started by requesting a tractor, without providing any information or without any context/output in the project, interigate them to understand what they want to create exactly


### **Phase 2: Prototype Composition**
- **View our tractor kit as a refernce** - You can see the main style, and key visual parts we used today for manual slideshow based tractors, in the `@shared-knowledge/studio-tractor-kit.pdf`
- **Combine components** into working HTML compositions
- **Add interaction logic** for click-through functionality
- **Include realistic mock data** (not Lorem Ipsum!!)
- **Ensure Wix Studio workspace aesthetic** consistency

### **Phase 5: Output Generation**
- **Create complete HTML file** with embedded CSS/JS
- **Save to project outputs** folder in the defined structure below
- **Base styling on MVP.css** the `tractor-base.md` includes an integration an minimal explenation about using it
- **Generate documentation** explaining the flow

## Output Structure

### **File Organization:**
```
projects/[project-name]/outputs/
├── [feature-name]-tractor.html     # Complete interactive prototype
├── tractor-assets/                 # Supporting files (if needed)
└── tractor-documentation.md        # Flow explanation and notes
```

## Integration with PM Workflow

### **When to Create Tractors (usually):**
- **After problem research** but before detailed design
- **When flows are complex** and need validation
- **For stakeholder alignment** on functionality
- **To test user journey assumptions**

### **Tractor Lifecycle:**
1. **PM identifies need** for flow validation
2. **Provides brief and sketches** (if available)
3. **Tractor generated** using component library
4. **Stakeholder review** and feedback
5. **Iteration** based on feedback
6. **Handoff to UX** for high-fidelity design

### **Success Metrics:**
- **Flow validation** - Does the user journey make sense?
- **Stakeholder alignment** - Are there agreement on functionality?
- **Gap identification** - What requirements were missed?
- **Decision support** - Does this help make product decisions?

---

**Key Principle**: Tractors are functional prototypes that validate user flows and product decisions using reusable components, enabling rapid iteration and stakeholder alignment before design investment.